{"version":3,"sources":["star.svg","lilninja.png","Ninjas.js","AddNinja.js","missions/Navbar.js","Todos.js","AddTodo.js","missions/Create.js","missions/RedDawn.js","missions/Firebase.js","missions/Killfox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Ninjas","ninjas","deleteNinja","className","map","ninja","key","id","src","lilninja","alt","name","specialty","onClick","AddNinja","state","handleSubmit","e","preventDefault","props","addingNinja","setState","handleLabelChange","target","value","handleChange","onSubmit","this","htmlFor","type","onChange","content","defaultValue","Component","Navbar","to","Todos","todos","deleteTodo","todoList","length","todo","AddTodo","addTodo","Create","Math","random","missionTodos","newTodos","filter","showMissions","RedDawn","Firebase","Killfox","App","newNinjas","showNinjas","console","log","star","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8699d977.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.337e1f36.svg\";","module.exports = __webpack_public_path__ + \"static/media/lilninja.ec560f2c.png\";","import React from 'react';\r\nimport lilninja from './lilninja.png'\r\n\r\nconst Ninjas  = ({ninjas, deleteNinja}) => {\r\n\r\n    return(\r\n      <div className=\"ninja-list\">\r\n        {     \r\n        ninjas.map(ninja => {\r\n          return ninja ? (\r\n            <div className=\"ninja\" key={ninja.id}>\r\n              <img src={lilninja} alt='ninja'></img>\r\n              <div>Name: {ninja.name} <br />\r\n              Specialty: {ninja.specialty}</div>\r\n              <button className='delete-ninja' onClick={() => {deleteNinja(ninja.id)}}>X</button>           \r\n            </div>\r\n          ) : null;\r\n        })\r\n        }\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Ninjas;","import React, { Component } from 'react'\r\n\r\nclass AddNinja extends Component {\r\n  state = {\r\n    name: '',\r\n    specialty: '',\r\n  }\r\n  \r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addingNinja(this.state);\r\n    this.setState({\r\n      name: '',\r\n    })\r\n    }\r\n\r\n  handleLabelChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n\r\n    })\r\n  }\r\n\r\n  handleChange = (onClick) => {\r\n    this.setState({\r\n      name: onClick.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"toTitle\">\r\n        <form  onSubmit={this.handleSubmit}>\r\n          <div>\r\n          <label htmlFor=\"name\">Your Name:</label></div>\r\n          <div><input type=\"text\" id='name' onChange={this.handleChange} value={this.state.name} />\r\n          </div>\r\n\r\n          <div><label htmlFor=\"specialty\">Specialty:</label></div>\r\n          <div><select id='specialty' onChange={this.handleLabelChange} value={this.state.content} >\r\n            <option defaultValue=\"Unknown\"></option>          \r\n            <option value=\"Iron Fist Punch\">Iron Fist Punch</option>\r\n            <option value=\"Cobra Strike Punch\">Cobra Strike Punch</option>            \r\n            <option value=\"Winged Horse Kick\">Winged Horse Kick</option>\r\n            <option value=\"Lightning Kick\">Lightning Kick</option>\r\n            <option value=\"Dragons Tail Throw\">Dragons Tail Throw</option>\r\n            <option value=\"Tiger Teeth Throw\">Tiger Teeth Throw</option>\r\n          </select></div>\r\n          <div><button>Add Ninja</button></div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default AddNinja;","import React from 'react'\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\n\r\n\r\n  const Navbar = () => {\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <div>\r\n          <ul className=\"mission-buttons\">\r\n            <h2>Missions</h2>\r\n            <Link to=\"/Create#mission\"><button>Create A Mission</button></Link>\r\n            <Link to=\"/Firebase#mission\"><button>Firebase</button></Link>\r\n            <Link to=\"/Killfox#mission\"><button>To Kill A Fox</button></Link>\r\n            <Link to=\"/RedDawn#mission\"><button>Red Blood Dawn</button></Link>                                   \r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\nexport default Navbar","import React from 'react'\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n  const todoList = todos.length \r\n  ? \r\n    (todos.map(todo =>{return (\r\n      <div className=\"collection-item\" key={todo.id}>\r\n        <span onClick={()=> {deleteTodo(todo.id)}}>{todo.content}</span>\r\n      </div>)})) \r\n  : (<h2 className=\"center\">Congrats! Mission Completed!</h2>)\r\n\r\n    return (\r\n    <div className=\"Ninjatodos collection\">\r\n      {todoList}\r\n    </div>\r\n  )\r\n}\r\nexport default Todos;","import React, { Component } from 'react'\r\n\r\nclass AddTodo extends Component {\r\n  state ={\r\n    content: ''\r\n\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      content: e.target.value\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content: '',\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>( Add New Assignment )</label>\r\n          <input type=\"text\" onChange={this.handleChange} value={this.state.content}></input>\r\n          <button>Add</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default AddTodo\r\n","import React, {Component} from 'react';\r\nimport Todos from '../Todos';\r\nimport AddTodo from '../AddTodo';\r\n\r\n\r\n\r\nclass Create extends Component {\r\n\r\n    constructor(){\r\n    super()\r\n    this.state ={\r\n      showMissions:false,\r\n      missionTodos: [\r\n        {id: 1, content: 'Create Custom Mission Below'},        \r\n      ]\r\n    }\r\n  }\r\n  addTodo = (todo) =>{\r\n  todo.id = Math.random();\r\n  let todos = [...this.state.missionTodos, todo];\r\n  this.setState({\r\n    missionTodos: todos\r\n  })\r\n}\r\n  deleteTodo =  (id) =>{\r\n    let newTodos = this.state.missionTodos.filter(todo =>{\r\n      return todo.id !== id\r\n    });\r\n       this.setState({\r\n      missionTodos: newTodos\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n\r\n        <div className=\"mission\">\r\n          <div id='mission'></div>\r\n          <h3>Mission To Do List</h3>\r\n          <label>( touch item to delete )</label>\r\n          <Todos todos={this.state.missionTodos} deleteTodo={this.deleteTodo} />\r\n          <AddTodo addTodo={this.addTodo} />\r\n        </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Create;","import React, {Component} from 'react';\r\nimport Todos from '../Todos';\r\nimport AddTodo from '../AddTodo';\r\n\r\n\r\n\r\nclass RedDawn extends Component {\r\n\r\n    constructor(){\r\n    super()\r\n    this.state ={\r\n      showMissions:false,\r\n      missionTodos: [\r\n        {id: 1, content: 'Necessary gear: torinoko(firecrackers), tetsubishi(spikes), kesarigame(sickle with chain).'},\r\n        {id: 2, content: 'there will be no escort, find your way into the city'},\r\n        {id: 3, content: 'find the fortress of Hirado'},\r\n        {id: 4, content: 'sneak over back wall of fortress'},\r\n        {id: 5, content: 'find the princess, free her, and lead her to the rendezvous'},\r\n        {id: 6, content: 'You have been spotted! Throw your tetsubishi spikes on the floor to slow down the guards!'},\r\n        {id: 7, content: 'In the next room you spot a group of soldiers you cannot pass: use your torinoko firecrackers to disorient them'},\r\n        {id: 8, content: 'You have almost made it, but one guard remains in the way to the rendezvous. Use your Kusargame(sickle) to neutralize him'},\r\n        {id: 9, content: 'Run quickly to the river that runs through the palace, a wasen boat with royal guards will be waiting for the princess'},               \r\n      ]\r\n    }\r\n  }\r\n  addTodo = (todo) =>{\r\n  todo.id = Math.random();\r\n  let todos = [...this.state.missionTodos, todo];\r\n  this.setState({\r\n    missionTodos: todos\r\n  })\r\n}\r\n  deleteTodo =  (id) =>{\r\n    let newTodos = this.state.missionTodos.filter(todo =>{\r\n      return todo.id !== id\r\n    });\r\n       this.setState({\r\n      missionTodos: newTodos\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n\r\n        <div className=\"mission\">\r\n          <div id='mission'></div>\r\n          <h2 className=\"center\">Red Blood Dawn</h2>\r\n          <h4>Princess Takara has been captured by the invading Mongolians! She is held up in the fortress of Hirado. You must be silent as the night to sneek past troops, in a heavily guarded area. </h4>\r\n          <h4> The Emperor Is Expecting Nothing Less Than The Full Recovery of His Daughter </h4>\r\n          <h3>Mission To Do List</h3>\r\n          <label>( touch item to delete )</label>\r\n          <Todos todos={this.state.missionTodos} deleteTodo={this.deleteTodo} />\r\n          <AddTodo addTodo={this.addTodo} />\r\n        </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default RedDawn;","import React, {Component} from 'react';\r\nimport Todos from '../Todos';\r\nimport AddTodo from '../AddTodo';\r\n\r\n\r\n\r\nclass Firebase extends Component {\r\n\r\n    constructor(){\r\n    super()\r\n    this.state ={\r\n      showMissions:false,\r\n      missionTodos: [\r\n        {id: 1, content: 'necessary gear: Shinobi Shozoku(Ninja Suit), takagi (climbing hooks), shuriken (ninja stars)'},\r\n        {id: 2, content: 'at midnight meet with Jinichi at the yellow shrine. He will take you past the initial guards'},\r\n        {id: 3, content: 'climb up vertical wall using your takagi climbing hooks and enter the large warehouse'},\r\n        {id: 4, content: 'sneak past the patrols in the warehouse and make it to the dock'},\r\n        {id:5, content:'find the large ship with a small red target painted on the hind quarter'},\r\n        {id:6, content:'climb aboard and go to bottom and set the cargo on fire'},\r\n        {id:7, content:'escape the dock area quickly and meet jinichi at the rendezvous'},\r\n        {id:8, content:'The ship is in flames! Now the village is alive with soldiers! Make your way out over the rooftops'},\r\n        {id:9, content:'three guards stand between you and Jinichi escaping the city, use your shuriken ninja stars to impail them! '},\r\n      ]\r\n    }\r\n  }\r\n  addTodo = (todo) =>{\r\n  todo.id = Math.random();\r\n  let todos = [...this.state.missionTodos, todo];\r\n  this.setState({\r\n    missionTodos: todos\r\n  })\r\n}\r\n  deleteTodo =  (id) =>{\r\n    let newTodos = this.state.missionTodos.filter(todo =>{\r\n      return todo.id !== id\r\n    });\r\n       this.setState({\r\n      missionTodos: newTodos\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n\r\n        <div className=\"mission\">\r\n          <div id='mission'></div>\r\n          <h2 className=\"center\">Firebase</h2>\r\n          <h4> Our Informat has let us know of a great weapons stash loaded on a ship in the harbor of Harido. It is your job to sink or destroy the ship to inhibit the mighty mongolian army.</h4>\r\n          <h4> The General of the Empires majesty has entrusted you with this mission. </h4>\r\n          <h3>Mission To Do List</h3>\r\n          <label>( touch finished items )</label>\r\n          <Todos todos={this.state.missionTodos} deleteTodo={this.deleteTodo} />\r\n          <AddTodo addTodo={this.addTodo} />\r\n        </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Firebase;","import React, {Component} from 'react';\r\nimport Todos from '../Todos';\r\nimport AddTodo from '../AddTodo';\r\n\r\n\r\n\r\nclass Killfox extends Component {\r\n\r\n    constructor(){\r\n    super()\r\n    this.state ={\r\n      showMissions:false,\r\n      missionTodos: [\r\n        {id: 1, content: 'Necessary gear: Katana(sword), Kusari katabira(chain armor), Yumi(bow)'},\r\n        {id: 2, content: 'At dusk meet with kawakami at the tea house on mt. haku'},\r\n        {id: 3, content: 'Kawakami will train you too make sure your bow skills are up to par'},\r\n        {id: 4, content: 'If you pass he will take you to the south field near Korean palace'},\r\n        {id: 5, content: 'from their you will need to sneak through the field of patrolling units'},\r\n        {id: 6, content: 'find your way through the workers without getting spotted'},\r\n        {id: 7, content: 'work your way up into the balcony in the grand hall '},\r\n        {id: 8, content: 'wait patentietly for the general to show up then Take your shot at him'},\r\n        {id: 9, content: 'The general has been hit! and immediatly your fellow ninja sets off a large explosion in a wagon outside the hall! you take advantage of the moment to escape the balcony '}, \r\n        {id: 10, content: 'The palace is alive like a hornets nest! You must fight your way through many guards.. But hurry! The more time you take to fight, the more organized the mongolians will be'},\r\n        {id: 11, content: 'You have been surrounded by more soldiers than you can fight! Quick thinking, you pull smoke bomb and strike it on the floor and make your escape!'},\r\n        {id: 12, content: 'make your way into the forest to the red barn, you will find a black Kisouma horse waiting for you'}              \r\n      ]\r\n    }\r\n  }\r\n  addTodo = (todo) =>{\r\n  todo.id = Math.random();\r\n  let todos = [...this.state.missionTodos, todo];\r\n  this.setState({\r\n    missionTodos: todos\r\n  })\r\n}\r\n  deleteTodo =  (id) =>{\r\n    let newTodos = this.state.missionTodos.filter(todo =>{\r\n      return todo.id !== id\r\n    });\r\n       this.setState({\r\n      missionTodos: newTodos\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n\r\n        <div className=\"mission\">\r\n          <div id='mission'></div>\r\n          <h2 className=\"center\">To Kill A Fox</h2>\r\n          <h4>Kublah Khan's top general, Liu Fuxiang  will be going to a ball at the palace of korea 3 days from now. from the balcony in the main hall you will get one chance with your Yumi bow to take out this Mongolian general and change the fate of Japan. You may not return alive. </h4>\r\n          <h4> The Empire of the sun is counting on you </h4>\r\n          <h3>Mission To Do List</h3>\r\n          <label>( touch item to delete )</label>\r\n          <Todos todos={this.state.missionTodos} deleteTodo={this.deleteTodo} />\r\n          <AddTodo addTodo={this.addTodo} />\r\n        </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Killfox;","import React, { Component } from 'react';\r\nimport star from './star.svg';\r\nimport './App.css';\r\nimport Ninjas from './Ninjas';\r\nimport AddNinja from './AddNinja';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport Navbar from './missions/Navbar';\r\nimport Create from './missions/Create';\r\nimport RedDawn from './missions/RedDawn';\r\nimport Firebase from './missions/Firebase';\r\nimport Killfox from './missions/Killfox';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state ={\r\n      showNinjas:false,\r\n      ninjas: [\r\n      ],\r\n      missionTodos: [\r\n      ],\r\n    }\r\n  };\r\n\r\n  addingNinja = (ninja) =>{\r\n    ninja.id = Math.random();\r\n    let newNinjas = [...this.state.ninjas, ninja]\r\n    this.setState({\r\n      ninjas: newNinjas\r\n    })\r\n  }\r\n  deleteNinja = (id) =>{\r\n    let newNinjas = this.state.ninjas.filter(ninja =>{\r\n      return ninja.id !== id\r\n    });\r\n    this.setState({\r\n      ninjas: newNinjas\r\n    })\r\n  }\r\n\r\n  operation(){\r\n    this.setState({\r\n      showNinjas:!this.state.showNinjas\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log(\"component mounted\")\r\n  }\r\n  componentDidUpdate(){\r\n    console.log('component updated')\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n      <div className=\"App\">\r\n\r\n        <header className=\"App-header\">\r\n          <img src={star} className=\"App-logo\" alt=\"logo\" />\r\n          <h1>Shinobi</h1>\r\n          <h1>Ninja</h1>\r\n        </header>\r\n        \r\n        <AddNinja addingNinja={this.addingNinja} />\r\n\r\n{this.setState.showNinjas?   <h3>Ninjas</h3>      :null}\r\n        <Ninjas ninjas={this.state.ninjas}  deleteNinja={this.deleteNinja} />\r\n\r\n        <div>\r\n\r\n          <Navbar />\r\n            <Route path='/Create' component={Create} />\r\n            <Route path='/RedDawn' component={RedDawn} />  \r\n            <Route path='/Firebase' component={Firebase} />  \r\n            <Route path='/Killfox' component={Killfox} />       \r\n        </div>\r\n      </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n        //{this.state.showMissions?         :null}\r\n\r\n        /*\r\n                <button onClick={()=>this.operation()}>Create Mission</button>\r\n        <button onClick={()=>this.operation()}>Mission: Red Blood Dawn</button>\r\n        <button onClick={()=>this.operation()}>Mission: Firebase</button>\r\n        <button onClick={()=>this.operation()}>Mission: To Kill A Fox</button>\r\n        */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}